{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","body":"# PySky - the Python Weather Toolkit\r\n\r\n** Warning: PySky is still under development and incomplete. **\r\n\r\nPySky is a python weather toolkit that provides access into a number of publicly available weather databases.  The goal of PySky is to provide a fast and easy-to-use interface to weather data in a pythonic way.  The current implementation focuses on United States weather data from NOAA, although future weather systems will be incorporated.  In particular, it provides hourly and daily forecast summaries.\r\n\r\n## Working with the module\r\n\r\nThe toolkit has several command-line scripts that return formatted weather data.  \r\n\r\nTo obtain forecast data, forecast.py is used.  For quick and dirty forecasts, forecast.py will use the NOAA XML web service to obtain forecast information.  For more robust applications, users of forecast.py will want to use the grib2 option.  The grib2 option downloads NOAA grib2 files which provide forecast elements for the entire United States.  Querying grib2 data is much faster and efficient than querying the XML web service.\r\n\r\n    pysky.py download (--grib2-dir=DIR) (--verbose)\r\n    pysky.py forecast (--hourly) (--grib2-dir=DIR) (--verbose) LATITUDE LONGITUDE\r\n    pysky.py --help\r\n\r\n    Examples:\r\n    pysky.py download # download to current directory\r\n    pysky.py download --grib2-dir=/tmp # download data files to /tmp\r\n    pysky.py forecast --grib2-dir=/tmp -- 38 -81 # get forecast for latitude 38 and longitude -81\r\n\r\nOutput for the forecast action are JSON encoded values of the following format:\r\n\r\n    { \r\n        'daily' : [\r\n            {\r\n                'date' : *date*\r\n                'high' : *high*,\r\n                'low' : *low*,\r\n                'humidity' : *humidity*,\r\n                'precip_day' : *daytime % chance of precip*,\r\n                'precip_night' : *night time % chance of precip*,\r\n                'rain_amount' : *rain amount in inches*,\r\n                'snow_amount' : *snow amount in inches*,\r\n                'weather': *weather description*,\r\n                'symbol': *weather symbol used by NOAA*,\r\n                'wind_sustained': *sustained wind in MPH*,\r\n                'wind_gust': *wind gusts in MPH* \r\n            }, ...\r\n        ],\r\n        'hourly' : [\r\n            {\r\n                'date' : *date*,\r\n                'time' : *time*,\r\n                'temp' : *temperature*,\r\n                'humidity' : *% humidity*,\r\n                'precip' : *% chance of precipitation*,\r\n                'rain_amount' : *rain amount in inches*,\r\n                'snow_amount' : *snow amount in inches*,\r\n                'sky' : *% cloud cover*:\r\n                'weather: *weather description*,\r\n                'wind_sustained': *sustained wind in MPH*,\r\n                'wind_gust': *wind guests in MPH \r\n            }, ...\r\n        ]\r\n     ]   \r\n\r\n## Requirements\r\n\r\nIf using grib2 files (not web service), the NOAA degrib library must be installed http://www.nws.noaa.gov/mdl/degrib/ .  In addition, the geodata directory included with the degrib source must be copied to the grid2 data directory.\r\n\r\n## TODO\r\n\r\n- Use hourly lowest temperature as daily low, if lower than regular daily low\r\n\r\n\r\n","name":"Pysky","tagline":"Python Weather"}